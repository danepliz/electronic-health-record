<?php

namespace FamilyHealth\MemberBundle\Entity;

/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends \Doctrine\ORM\EntityRepository
{

    public function listMembers($offset = NULL, $perPage = NULL, $filters = []){
        $qb = $this->_em->createQueryBuilder();

        $qb->select('m')
            ->from('FamilyHealthMemberBundle:Member','m')
            ->where('m.memberId IS NOT NULL');

        if(array_key_exists('name', $filters) and $filters['name'] != ''){
            $qb->andWhere($qb->expr()->like('m.name', $qb->expr()->literal('%'.$filters['name'].'%')));
        }

        if(array_key_exists('gender', $filters) and $filters['gender'] != ''){
            $qb->andWhere('m.gender = :gender')->setParameter('gender', $filters['gender']);
        }

        if(array_key_exists('age_min', $filters) and $filters['age_min'] != ''){
            $qb->andWhere('m.age >= :ageMin')->setParameter('ageMin', $filters['age_min']);
        }

        if(array_key_exists('age_max', $filters) and $filters['age_max'] != ''){
            $qb->andWhere('m.age <= :ageMax')->setParameter('ageMax', $filters['age_max']);
        }

        if(array_key_exists('status', $filters) and $filters['status'] != ''){
            if($filters['status'] == 'PREMIUM'){
                $qb->andWhere('m.isPremiumMember = 1');
            }

            if($filters['status'] == 'NON-PREMIUM'){
                $qb->andWhere('m.isPremiumMember = 0');
            }

        }

        if( $offset ){
            $qb->setFirstResult($offset);
        }

        if($perPage){
            $qb->setMaxResults($perPage);
        }

//        echo $qb->getQuery()->getSQL(); die;

        return $qb->getQuery()->getResult();
    }

    public function getNextMemberIdCount($prefix){
        $qb = $this->_em->createQueryBuilder();

        $cond = "substring('m.memberId', 0, ".strlen($prefix).")";
        $prefixLen = strlen($prefix);

        $qb->select('MAX(m.memberId)')
            ->from('FamilyHealthMemberBundle:Member','m')
            ->where($qb->expr()->substring('m.memberId', 1, $prefixLen) .' = :prefix')->setParameter('prefix', $prefix);

        $lastMemberId = $qb->getQuery()->getSingleScalarResult();

        if( '' == $lastMemberId ){
            $memberId = $prefix.'-0000';
        }else{
            list($pre, $year, $count) = explode('-',$lastMemberId);
            $count++;
            $memberId = $prefix.'-'.str_pad($count, 4, '0', STR_PAD_LEFT);
        }

        return $memberId;
    }


    public function getMemberCounts(){

        $qb = $this->_em->createQueryBuilder();

        $qb->select('count(m)')
            ->from('FamilyHealthMemberBundle:Member','m')
            ->where('m.memberId IS NOT NULL');

        $totalMemberCount = $qb->getQuery()->getSingleScalarResult();

        $qb->andWhere('m.isPremiumMember = 1');
        $totalPremiumMember = $qb->getQuery()->getSingleScalarResult();

        return [
            'total'=> $totalMemberCount,
            'premium'=> $totalPremiumMember,
            'premium_percent'=> ($totalMemberCount)? $totalPremiumMember/$totalMemberCount * 100 : 0,
            'non_premium' => $totalMemberCount - $totalPremiumMember,
            'non_premium_percent' => ($totalMemberCount)? ($totalMemberCount - $totalPremiumMember)/$totalMemberCount * 100 :0,
        ];


    }

}
